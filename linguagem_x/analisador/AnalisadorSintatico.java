
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 14 11:11:23 BRT 2016
//----------------------------------------------------

package analisador;

import java.util.*;
import java_cup.runtime.*;
import sintaxe_abstrata.*;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Fri Oct 14 11:11:23 BRT 2016
 */
public class AnalisadorSintatico extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public AnalisadorSintatico() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public AnalisadorSintatico(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Constructor which sets the default scanner. */
    public AnalisadorSintatico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(
                    new String[] {
                        "\000\162\000\002\002\004\000\002\002\003\000\002\003"
                                + "\003\000\002\003\004\000\002\004\003\000\002\004\003"
                                + "\000\002\004\003\000\002\004\003\000\002\013\003\000"
                                + "\002\013\003\000\002\014\003\000\002\014\003\000\002"
                                + "\015\004\000\002\015\004\000\002\017\003\000\002\017"
                                + "\004\000\002\023\005\000\002\016\003\000\002\016\003"
                                + "\000\002\024\003\000\002\024\003\000\002\024\003\000"
                                + "\002\025\003\000\002\025\005\000\002\025\005\000\002"
                                + "\025\005\000\002\025\005\000\002\025\005\000\002\025"
                                + "\005\000\002\025\005\000\002\025\005\000\002\025\005"
                                + "\000\002\025\005\000\002\025\004\000\002\025\004\000"
                                + "\002\026\005\000\002\026\003\000\002\026\003\000\002"
                                + "\026\003\000\002\033\006\000\002\031\003\000\002\032"
                                + "\003\000\002\032\004\000\002\021\002\000\002\021\003"
                                + "\000\002\020\003\000\002\020\005\000\002\057\003\000"
                                + "\002\057\010\000\002\057\012\000\002\057\003\000\002"
                                + "\057\003\000\002\057\003\000\002\060\003\000\002\060"
                                + "\012\000\002\060\007\000\002\060\003\000\002\060\003"
                                + "\000\002\062\007\000\002\063\006\000\002\064\006\000"
                                + "\002\065\005\000\002\066\002\000\002\066\003\000\002"
                                + "\067\003\000\002\067\004\000\002\061\003\000\002\061"
                                + "\003\000\002\061\003\000\002\005\003\000\002\005\003"
                                + "\000\002\005\003\000\002\005\003\000\002\010\006\000"
                                + "\002\007\010\000\002\011\010\000\002\012\010\000\002"
                                + "\006\010\000\002\006\010\000\002\035\003\000\002\022"
                                + "\005\000\002\040\003\000\002\040\004\000\002\041\007"
                                + "\000\002\041\007\000\002\034\004\000\002\036\010\000"
                                + "\002\042\002\000\002\042\003\000\002\043\003\000\002"
                                + "\043\005\000\002\046\003\000\002\046\003\000\002\047"
                                + "\004\000\002\047\004\000\002\050\005\000\002\050\005"
                                + "\000\002\027\004\000\002\027\003\000\002\051\005\000"
                                + "\002\052\002\000\002\052\003\000\002\053\004\000\002"
                                + "\054\002\000\002\054\003\000\002\055\003\000\002\055"
                                + "\004\000\002\030\004\000\002\056\004\000\002\037\007"
                                + "\000\002\044\002\000\002\044\003\000\002\045\003\000"
                                + "\002\045\005"
                    });

    /** Access to production table. */
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(
                    new String[] {
                        "\000\314\000\012\004\012\005\024\011\022\012\010\001"
                                + "\002\000\014\002\ufffc\004\ufffc\005\ufffc\011\ufffc\012\ufffc"
                                + "\001\002\000\022\021\300\023\053\033\040\044\050\045"
                                + "\054\046\041\047\043\050\047\001\002\000\014\002\ufffb"
                                + "\004\ufffb\005\ufffb\011\ufffb\012\ufffb\001\002\000\014\002"
                                + "\uffff\004\uffff\005\uffff\011\uffff\012\uffff\001\002\000\004"
                                + "\050\270\001\002\000\004\002\267\001\002\000\010\006"
                                + "\032\007\033\010\027\001\002\000\012\013\165\016\156"
                                + "\021\157\050\166\001\002\000\014\002\000\004\012\005"
                                + "\024\011\022\012\010\001\002\000\026\002\uffbc\004\uffbc"
                                + "\005\uffbc\011\uffbc\012\uffbc\013\uffbc\016\uffbc\021\uffbc\022"
                                + "\uffbc\050\uffbc\001\002\000\014\002\ufffa\004\ufffa\005\ufffa"
                                + "\011\ufffa\012\ufffa\001\002\000\026\002\uffb9\004\uffb9\005"
                                + "\uffb9\011\uffb9\012\uffb9\013\uffb9\016\uffb9\021\uffb9\022\uffb9"
                                + "\050\uffb9\001\002\000\014\002\ufffd\004\ufffd\005\ufffd\011"
                                + "\ufffd\012\ufffd\001\002\000\026\002\uffba\004\uffba\005\uffba"
                                + "\011\uffba\012\uffba\013\uffba\016\uffba\021\uffba\022\uffba\050"
                                + "\uffba\001\002\000\010\006\032\007\033\010\027\001\002"
                                + "\000\026\002\uffbb\004\uffbb\005\uffbb\011\uffbb\012\uffbb\013"
                                + "\uffbb\016\uffbb\021\uffbb\022\uffbb\050\uffbb\001\002\000\010"
                                + "\006\032\007\033\010\027\001\002\000\004\050\ufff8\001"
                                + "\002\000\006\017\034\050\ufff7\001\002\000\006\017\uffef"
                                + "\050\uffef\001\002\000\004\050\116\001\002\000\004\050"
                                + "\ufff9\001\002\000\006\017\034\050\ufff6\001\002\000\006"
                                + "\017\ufff0\050\ufff0\001\002\000\020\023\053\033\040\044"
                                + "\050\045\054\046\041\047\043\050\047\001\002\000\006"
                                + "\017\ufff3\050\ufff3\001\002\000\006\017\034\050\ufff4\001"
                                + "\002\000\006\017\ufff2\050\ufff2\001\002\000\020\023\053"
                                + "\033\040\044\050\045\054\046\041\047\043\050\047\001"
                                + "\002\000\040\020\uffed\022\uffed\024\uffed\025\uffed\026\uffed"
                                + "\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\040"
                                + "\uffed\041\uffed\042\uffed\043\uffed\001\002\000\040\020\uffeb"
                                + "\022\uffeb\024\uffeb\025\uffeb\026\uffeb\031\uffeb\032\uffeb\033"
                                + "\uffeb\034\uffeb\035\uffeb\036\uffeb\040\uffeb\041\uffeb\042\uffeb"
                                + "\043\uffeb\001\002\000\040\020\uffec\022\uffec\024\uffec\025"
                                + "\uffec\026\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec"
                                + "\036\uffec\040\uffec\041\uffec\042\uffec\043\uffec\001\002\000"
                                + "\042\017\034\020\uffd9\022\uffd9\024\uffd9\025\uffd9\026\uffd9"
                                + "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\040"
                                + "\uffd9\041\uffd9\042\uffd9\043\uffd9\001\002\000\040\020\uffdc"
                                + "\022\uffdc\024\uffdc\025\uffdc\026\uffdc\031\uffdc\032\uffdc\033"
                                + "\uffdc\034\uffdc\035\uffdc\036\uffdc\040\uffdc\041\uffdc\042\uffdc"
                                + "\043\uffdc\001\002\000\030\020\113\031\060\032\063\033"
                                + "\056\034\061\035\064\036\062\040\067\041\065\042\057"
                                + "\043\070\001\002\000\044\017\uffd8\020\uffd8\022\uffd8\023"
                                + "\104\024\uffd8\025\uffd8\026\uffd8\031\uffd8\032\uffd8\033\uffd8"
                                + "\034\uffd8\035\uffd8\036\uffd8\040\uffd8\041\uffd8\042\uffd8\043"
                                + "\uffd8\001\002\000\020\023\053\033\040\044\050\045\054"
                                + "\046\041\047\043\050\047\001\002\000\040\020\uffdd\022"
                                + "\uffdd\024\uffdd\025\uffdd\026\uffdd\031\uffdd\032\uffdd\033\uffdd"
                                + "\034\uffdd\035\uffdd\036\uffdd\040\uffdd\041\uffdd\042\uffdd\043"
                                + "\uffdd\001\002\000\040\020\uffdb\022\uffdb\024\uffdb\025\uffdb"
                                + "\026\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036"
                                + "\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\001\002\000\020"
                                + "\023\053\033\040\044\050\045\054\046\041\047\043\050"
                                + "\047\001\002\000\040\020\uffee\022\uffee\024\uffee\025\uffee"
                                + "\026\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036"
                                + "\uffee\040\uffee\041\uffee\042\uffee\043\uffee\001\002\000\030"
                                + "\024\066\031\060\032\063\033\056\034\061\035\064\036"
                                + "\062\040\067\041\065\042\057\043\070\001\002\000\020"
                                + "\023\053\033\040\044\050\045\054\046\041\047\043\050"
                                + "\047\001\002\000\020\023\053\033\040\044\050\045\054"
                                + "\046\041\047\043\050\047\001\002\000\020\023\053\033"
                                + "\040\044\050\045\054\046\041\047\043\050\047\001\002"
                                + "\000\020\023\053\033\040\044\050\045\054\046\041\047"
                                + "\043\050\047\001\002\000\020\023\053\033\040\044\050"
                                + "\045\054\046\041\047\043\050\047\001\002\000\020\023"
                                + "\053\033\040\044\050\045\054\046\041\047\043\050\047"
                                + "\001\002\000\020\023\053\033\040\044\050\045\054\046"
                                + "\041\047\043\050\047\001\002\000\020\023\053\033\040"
                                + "\044\050\045\054\046\041\047\043\050\047\001\002\000"
                                + "\040\020\uffde\022\uffde\024\uffde\025\uffde\026\uffde\031\uffde"
                                + "\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\040\uffde\041"
                                + "\uffde\042\uffde\043\uffde\001\002\000\020\023\053\033\040"
                                + "\044\050\045\054\046\041\047\043\050\047\001\002\000"
                                + "\020\023\053\033\040\044\050\045\054\046\041\047\043"
                                + "\050\047\001\002\000\040\020\uffe1\022\uffe1\024\uffe1\025"
                                + "\uffe1\026\uffe1\031\uffe1\032\uffe1\033\uffe1\034\061\035\064"
                                + "\036\062\040\uffe1\041\uffe1\042\057\043\uffe1\001\002\000"
                                + "\040\020\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4\031\uffe4"
                                + "\032\063\033\056\034\061\035\064\036\062\040\uffe4\041"
                                + "\uffe4\042\057\043\070\001\002\000\040\020\uffe5\022\uffe5"
                                + "\024\uffe5\025\uffe5\026\uffe5\031\uffe5\032\063\033\056\034"
                                + "\061\035\064\036\062\040\uffe5\041\uffe5\042\057\043\070"
                                + "\001\002\000\040\020\uffe7\022\uffe7\024\uffe7\025\uffe7\026"
                                + "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7"
                                + "\040\uffe7\041\uffe7\042\uffe7\043\uffe7\001\002\000\040\020"
                                + "\uffea\022\uffea\024\uffea\025\uffea\026\uffea\031\uffea\032\uffea"
                                + "\033\uffea\034\061\035\064\036\062\040\uffea\041\uffea\042"
                                + "\057\043\uffea\001\002\000\040\020\uffe6\022\uffe6\024\uffe6"
                                + "\025\uffe6\026\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035"
                                + "\uffe6\036\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\001\002"
                                + "\000\040\020\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\031"
                                + "\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\040\uffe8"
                                + "\041\uffe8\042\uffe8\043\uffe8\001\002\000\040\020\uffe3\022"
                                + "\uffe3\024\uffe3\025\uffe3\026\uffe3\031\uffe3\032\063\033\056"
                                + "\034\061\035\064\036\062\040\uffe3\041\uffe3\042\057\043"
                                + "\070\001\002\000\040\020\uffe2\022\uffe2\024\uffe2\025\uffe2"
                                + "\026\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036"
                                + "\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\001\002\000\040"
                                + "\020\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9\031\uffe9\032"
                                + "\uffe9\033\uffe9\034\061\035\064\036\062\040\uffe9\041\uffe9"
                                + "\042\057\043\uffe9\001\002\000\040\020\uffdf\022\uffdf\024"
                                + "\uffdf\025\uffdf\026\uffdf\031\060\032\063\033\056\034\061"
                                + "\035\064\036\062\040\067\041\065\042\057\043\070\001"
                                + "\002\000\022\023\053\024\uffd6\033\040\044\050\045\054"
                                + "\046\041\047\043\050\047\001\002\000\004\024\112\001"
                                + "\002\000\034\022\uffd4\024\uffd4\026\uffd4\031\060\032\063"
                                + "\033\056\034\061\035\064\036\062\040\067\041\065\042"
                                + "\057\043\070\001\002\000\006\024\uffd5\026\110\001\002"
                                + "\000\020\023\053\033\040\044\050\045\054\046\041\047"
                                + "\043\050\047\001\002\000\034\022\uffd3\024\uffd3\026\uffd3"
                                + "\031\060\032\063\033\056\034\061\035\064\036\062\040"
                                + "\067\041\065\042\057\043\070\001\002\000\040\020\uffda"
                                + "\022\uffda\024\uffda\025\uffda\026\uffda\031\uffda\032\uffda\033"
                                + "\uffda\034\uffda\035\uffda\036\uffda\040\uffda\041\uffda\042\uffda"
                                + "\043\uffda\001\002\000\046\017\ufff1\020\ufff1\022\ufff1\024"
                                + "\ufff1\025\ufff1\026\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1"
                                + "\034\ufff1\035\ufff1\036\ufff1\040\ufff1\041\ufff1\042\ufff1\043"
                                + "\ufff1\050\ufff1\001\002\000\044\017\uffd7\020\uffd7\022\uffd7"
                                + "\024\uffd7\025\uffd7\026\uffd7\030\uffd7\031\uffd7\032\uffd7\033"
                                + "\uffd7\034\uffd7\035\uffd7\036\uffd7\040\uffd7\041\uffd7\042\uffd7"
                                + "\043\uffd7\001\002\000\040\020\uffe0\022\uffe0\024\uffe0\025"
                                + "\uffe0\026\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0"
                                + "\036\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\001\002\000"
                                + "\014\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\001\002"
                                + "\000\004\030\120\001\002\000\022\021\121\023\053\033"
                                + "\040\044\050\045\054\046\041\047\043\050\047\001\002"
                                + "\000\020\023\053\033\040\044\050\045\054\046\041\047"
                                + "\043\050\047\001\002\000\004\025\125\001\002\000\030"
                                + "\025\124\031\060\032\063\033\056\034\061\035\064\036"
                                + "\062\040\067\041\065\042\057\043\070\001\002\000\042"
                                + "\002\uffb4\004\uffb4\005\uffb4\011\uffb4\012\uffb4\013\uffb4\016"
                                + "\uffb4\021\uffb4\022\uffb4\023\uffb4\033\uffb4\044\uffb4\045\uffb4"
                                + "\046\uffb4\047\uffb4\050\uffb4\001\002\000\042\002\uffb3\004"
                                + "\uffb3\005\uffb3\011\uffb3\012\uffb3\013\uffb3\016\uffb3\021\uffb3"
                                + "\022\uffb3\023\uffb3\033\uffb3\044\uffb3\045\uffb3\046\uffb3\047"
                                + "\uffb3\050\uffb3\001\002\000\006\022\127\026\110\001\002"
                                + "\000\004\025\uffb1\001\002\000\006\017\034\050\ufff5\001"
                                + "\002\000\004\050\132\001\002\000\004\023\133\001\002"
                                + "\000\014\004\141\006\032\007\033\010\027\024\uffaa\001"
                                + "\002\000\004\050\116\001\002\000\004\050\116\001\002"
                                + "\000\004\024\152\001\002\000\006\024\uffa9\026\150\001"
                                + "\002\000\006\024\uffa6\026\uffa6\001\002\000\010\006\032"
                                + "\007\033\010\027\001\002\000\006\024\uffa8\026\uffa8\001"
                                + "\002\000\006\024\uffa5\026\uffa5\001\002\000\004\050\116"
                                + "\001\002\000\004\050\116\001\002\000\006\024\uffa2\026"
                                + "\uffa2\001\002\000\006\024\uffa1\026\uffa1\001\002\000\012"
                                + "\004\141\006\032\007\033\010\027\001\002\000\006\024"
                                + "\uffa7\026\uffa7\001\002\000\022\021\uffab\023\uffab\033\uffab"
                                + "\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\001\002\000"
                                + "\006\024\uffa3\026\uffa3\001\002\000\006\024\uffa4\026\uffa4"
                                + "\001\002\000\014\002\ufffe\004\ufffe\005\ufffe\011\ufffe\012"
                                + "\ufffe\001\002\000\004\023\237\001\002\000\020\004\012"
                                + "\005\024\013\165\016\156\021\157\022\uffc3\050\166\001"
                                + "\002\000\026\002\uffd2\004\uffd2\005\uffd2\011\uffd2\012\uffd2"
                                + "\013\uffd2\016\uffd2\021\uffd2\022\uffd2\050\uffd2\001\002\000"
                                + "\014\002\uff95\004\uff95\005\uff95\011\uff95\012\uff95\001\002"
                                + "\000\026\002\uffcf\004\uffcf\005\uffcf\011\uffcf\012\uffcf\013"
                                + "\uffcf\016\uffcf\021\uffcf\022\uffcf\050\uffcf\001\002\000\006"
                                + "\017\034\030\224\001\002\000\026\002\uffcd\004\uffcd\005"
                                + "\uffcd\011\uffcd\012\uffcd\013\uffcd\016\uffcd\021\uffcd\022\uffcd"
                                + "\050\uffcd\001\002\000\004\023\173\001\002\000\010\017"
                                + "\uffd8\023\170\030\uffd8\001\002\000\026\002\uffce\004\uffce"
                                + "\005\uffce\011\uffce\012\uffce\013\uffce\016\uffce\021\uffce\022"
                                + "\uffce\050\uffce\001\002\000\022\023\053\024\uffd6\033\040"
                                + "\044\050\045\054\046\041\047\043\050\047\001\002\000"
                                + "\004\024\172\001\002\000\030\002\uffc5\004\uffc5\005\uffc5"
                                + "\011\uffc5\012\uffc5\013\uffc5\015\uffc5\016\uffc5\021\uffc5\022"
                                + "\uffc5\050\uffc5\001\002\000\020\023\053\033\040\044\050"
                                + "\045\054\046\041\047\043\050\047\001\002\000\030\024"
                                + "\175\031\060\032\063\033\056\034\061\035\064\036\062"
                                + "\040\067\041\065\042\057\043\070\001\002\000\004\014"
                                + "\176\001\002\000\012\013\203\016\177\021\157\050\166"
                                + "\001\002\000\004\023\217\001\002\000\030\002\uffd2\004"
                                + "\uffd2\005\uffd2\011\uffd2\012\uffd2\013\uffd2\015\uffcc\016\uffd2"
                                + "\021\uffd2\022\uffd2\050\uffd2\001\002\000\026\002\uffd1\004"
                                + "\uffd1\005\uffd1\011\uffd1\012\uffd1\013\uffd1\016\uffd1\021\uffd1"
                                + "\022\uffd1\050\uffd1\001\002\000\004\015\216\001\002\000"
                                + "\004\023\206\001\002\000\030\002\uffcd\004\uffcd\005\uffcd"
                                + "\011\uffcd\012\uffcd\013\uffcd\015\uffc8\016\uffcd\021\uffcd\022"
                                + "\uffcd\050\uffcd\001\002\000\030\002\uffce\004\uffce\005\uffce"
                                + "\011\uffce\012\uffce\013\uffce\015\uffc9\016\uffce\021\uffce\022"
                                + "\uffce\050\uffce\001\002\000\020\023\053\033\040\044\050"
                                + "\045\054\046\041\047\043\050\047\001\002\000\030\024"
                                + "\210\031\060\032\063\033\056\034\061\035\064\036\062"
                                + "\040\067\041\065\042\057\043\070\001\002\000\004\014"
                                + "\211\001\002\000\012\013\203\016\177\021\157\050\166"
                                + "\001\002\000\004\015\213\001\002\000\012\013\203\016"
                                + "\177\021\157\050\166\001\002\000\026\002\uffd0\004\uffd0"
                                + "\005\uffd0\011\uffd0\012\uffd0\013\uffd0\016\uffd0\021\uffd0\022"
                                + "\uffd0\050\uffd0\001\002\000\004\015\uffcb\001\002\000\012"
                                + "\013\165\016\156\021\157\050\166\001\002\000\020\023"
                                + "\053\033\040\044\050\045\054\046\041\047\043\050\047"
                                + "\001\002\000\030\024\221\031\060\032\063\033\056\034"
                                + "\061\035\064\036\062\040\067\041\065\042\057\043\070"
                                + "\001\002\000\012\013\203\016\177\021\157\050\166\001"
                                + "\002\000\026\002\uffc7\004\uffc7\005\uffc7\011\uffc7\012\uffc7"
                                + "\013\uffc7\016\uffc7\021\uffc7\022\uffc7\050\uffc7\001\002\000"
                                + "\004\015\uffca\001\002\000\020\023\053\033\040\044\050"
                                + "\045\054\046\041\047\043\050\047\001\002\000\030\025"
                                + "\226\031\060\032\063\033\056\034\061\035\064\036\062"
                                + "\040\067\041\065\042\057\043\070\001\002\000\030\002"
                                + "\uffc6\004\uffc6\005\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6"
                                + "\016\uffc6\021\uffc6\022\uffc6\050\uffc6\001\002\000\020\004"
                                + "\012\005\024\013\165\016\156\021\157\022\uffc2\050\166"
                                + "\001\002\000\020\004\uffbe\005\uffbe\013\uffbe\016\uffbe\021"
                                + "\uffbe\022\uffbe\050\uffbe\001\002\000\004\022\235\001\002"
                                + "\000\020\004\uffbd\005\uffbd\013\uffbd\016\uffbd\021\uffbd\022"
                                + "\uffbd\050\uffbd\001\002\000\020\004\uffc1\005\uffc1\013\uffc1"
                                + "\016\uffc1\021\uffc1\022\uffc1\050\uffc1\001\002\000\020\004"
                                + "\uffbf\005\uffbf\013\uffbf\016\uffbf\021\uffbf\022\uffbf\050\uffbf"
                                + "\001\002\000\030\002\uffc4\004\uffc4\005\uffc4\011\uffc4\012"
                                + "\uffc4\013\uffc4\015\uffc4\016\uffc4\021\uffc4\022\uffc4\050\uffc4"
                                + "\001\002\000\020\004\uffc0\005\uffc0\013\uffc0\016\uffc0\021"
                                + "\uffc0\022\uffc0\050\uffc0\001\002\000\020\023\053\033\040"
                                + "\044\050\045\054\046\041\047\043\050\047\001\002\000"
                                + "\030\024\241\031\060\032\063\033\056\034\061\035\064"
                                + "\036\062\040\067\041\065\042\057\043\070\001\002\000"
                                + "\012\013\165\016\156\021\157\050\166\001\002\000\004"
                                + "\050\116\001\002\000\006\025\245\030\244\001\002\000"
                                + "\022\021\246\023\053\033\040\044\050\045\054\046\041"
                                + "\047\043\050\047\001\002\000\026\002\uffb8\004\uffb8\005"
                                + "\uffb8\011\uffb8\012\uffb8\013\uffb8\016\uffb8\021\uffb8\022\uffb8"
                                + "\050\uffb8\001\002\000\020\023\053\033\040\044\050\045"
                                + "\054\046\041\047\043\050\266\001\002\000\004\025\265"
                                + "\001\002\000\006\021\uffb0\025\uffb0\001\002\000\006\021"
                                + "\254\025\255\001\002\000\030\025\253\031\060\032\063"
                                + "\033\056\034\061\035\064\036\062\040\067\041\065\042"
                                + "\057\043\070\001\002\000\026\002\uffb7\004\uffb7\005\uffb7"
                                + "\011\uffb7\012\uffb7\013\uffb7\016\uffb7\021\uffb7\022\uffb7\050"
                                + "\uffb7\001\002\000\004\050\116\001\002\000\026\002\uffb5"
                                + "\004\uffb5\005\uffb5\011\uffb5\012\uffb5\013\uffb5\016\uffb5\021"
                                + "\uffb5\022\uffb5\050\uffb5\001\002\000\006\021\uffaf\025\uffaf"
                                + "\001\002\000\004\027\260\001\002\000\022\021\254\023"
                                + "\053\033\040\044\050\045\054\046\041\047\043\050\047"
                                + "\001\002\000\004\022\264\001\002\000\030\022\263\031"
                                + "\060\032\063\033\056\034\061\035\064\036\062\040\067"
                                + "\041\065\042\057\043\070\001\002\000\010\021\uffae\022"
                                + "\uffae\025\uffae\001\002\000\010\021\uffad\022\uffad\025\uffad"
                                + "\001\002\000\026\002\uffb6\004\uffb6\005\uffb6\011\uffb6\012"
                                + "\uffb6\013\uffb6\016\uffb6\021\uffb6\022\uffb6\050\uffb6\001\002"
                                + "\000\040\017\uffd8\022\uffd8\023\104\026\uffd8\027\uffb2\031"
                                + "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8"
                                + "\041\uffd8\042\uffd8\043\uffd8\001\002\000\004\002\001\001"
                                + "\002\000\004\023\271\001\002\000\012\006\032\007\033"
                                + "\010\027\024\uff93\001\002\000\006\024\uff92\026\276\001"
                                + "\002\000\006\024\uff91\026\uff91\001\002\000\004\024\275"
                                + "\001\002\000\012\013\uff94\016\uff94\021\uff94\050\uff94\001"
                                + "\002\000\010\006\032\007\033\010\027\001\002\000\006"
                                + "\024\uff90\026\uff90\001\002\000\024\005\024\022\uff9d\023"
                                + "\uff9a\033\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a"
                                + "\001\002\000\014\002\uff9f\004\uff9f\005\uff9f\011\uff9f\012"
                                + "\uff9f\001\002\000\030\025\304\031\060\032\063\033\056"
                                + "\034\061\035\064\036\062\040\067\041\065\042\057\043"
                                + "\070\001\002\000\014\002\uffac\004\uffac\005\uffac\011\uffac"
                                + "\012\uffac\001\002\000\014\002\uffa0\004\uffa0\005\uffa0\011"
                                + "\uffa0\012\uffa0\001\002\000\004\022\316\001\002\000\004"
                                + "\022\uff9c\001\002\000\022\005\024\023\uff99\033\uff99\044"
                                + "\uff99\045\uff99\046\uff99\047\uff99\050\uff99\001\002\000\020"
                                + "\023\053\033\040\044\050\045\054\046\041\047\043\050"
                                + "\047\001\002\000\022\005\uff98\023\uff98\033\uff98\044\uff98"
                                + "\045\uff98\046\uff98\047\uff98\050\uff98\001\002\000\004\022"
                                + "\uff9b\001\002\000\030\025\314\031\060\032\063\033\056"
                                + "\034\061\035\064\036\062\040\067\041\065\042\057\043"
                                + "\070\001\002\000\004\022\uff96\001\002\000\022\005\uff97"
                                + "\023\uff97\033\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050"
                                + "\uff97\001\002\000\014\002\uff9e\004\uff9e\005\uff9e\011\uff9e"
                                + "\012\uff9e\001\002"
                    });

    /** Access to parse-action table. */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(
                    new String[] {
                        "\000\314\000\034\002\010\003\013\004\006\005\017\006"
                                + "\003\007\022\010\014\011\020\012\016\034\005\036\004"
                                + "\037\012\056\015\001\001\000\002\001\001\000\022\024"
                                + "\050\025\301\026\041\027\302\031\044\032\043\033\051"
                                + "\051\300\001\001\000\002\001\001\000\002\001\001\000"
                                + "\002\001\001\000\002\001\001\000\012\013\241\014\030"
                                + "\015\024\016\025\001\001\000\016\032\162\057\160\062"
                                + "\161\063\166\064\163\065\157\001\001\000\030\004\154"
                                + "\005\017\006\003\007\022\010\014\011\020\012\016\034"
                                + "\005\036\004\037\012\056\015\001\001\000\002\001\001"
                                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                                + "\002\001\001\000\012\013\130\014\030\015\024\016\025"
                                + "\001\001\000\002\001\001\000\012\013\027\014\030\015"
                                + "\024\016\025\001\001\000\002\001\001\000\006\017\127"
                                + "\023\034\001\001\000\002\001\001\000\004\035\116\001"
                                + "\001\000\002\001\001\000\006\017\035\023\034\001\001"
                                + "\000\002\001\001\000\016\024\050\025\045\026\041\031"
                                + "\044\032\043\033\051\001\001\000\002\001\001\000\004"
                                + "\023\036\001\001\000\002\001\001\000\016\024\050\025"
                                + "\114\026\041\031\044\032\043\033\051\001\001\000\002"
                                + "\001\001\000\002\001\001\000\002\001\001\000\004\023"
                                + "\113\001\001\000\002\001\001\000\002\001\001\000\002"
                                + "\001\001\000\016\024\050\025\102\026\041\031\044\032"
                                + "\043\033\051\001\001\000\002\001\001\000\002\001\001"
                                + "\000\016\024\050\025\054\026\041\031\044\032\043\033"
                                + "\051\001\001\000\002\001\001\000\002\001\001\000\016"
                                + "\024\050\025\101\026\041\031\044\032\043\033\051\001"
                                + "\001\000\016\024\050\025\100\026\041\031\044\032\043"
                                + "\033\051\001\001\000\016\024\050\025\077\026\041\031"
                                + "\044\032\043\033\051\001\001\000\016\024\050\025\076"
                                + "\026\041\031\044\032\043\033\051\001\001\000\016\024"
                                + "\050\025\075\026\041\031\044\032\043\033\051\001\001"
                                + "\000\016\024\050\025\074\026\041\031\044\032\043\033"
                                + "\051\001\001\000\016\024\050\025\073\026\041\031\044"
                                + "\032\043\033\051\001\001\000\016\024\050\025\072\026"
                                + "\041\031\044\032\043\033\051\001\001\000\002\001\001"
                                + "\000\016\024\050\025\071\026\041\031\044\032\043\033"
                                + "\051\001\001\000\016\024\050\025\070\026\041\031\044"
                                + "\032\043\033\051\001\001\000\002\001\001\000\002\001"
                                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                                + "\002\001\001\000\002\001\001\000\002\001\001\000\022"
                                + "\020\106\021\104\024\050\025\105\026\041\031\044\032"
                                + "\043\033\051\001\001\000\002\001\001\000\002\001\001"
                                + "\000\002\001\001\000\016\024\050\025\110\026\041\031"
                                + "\044\032\043\033\051\001\001\000\002\001\001\000\002"
                                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                                + "\001\000\002\001\001\000\002\001\001\000\020\022\121"
                                + "\024\050\025\122\026\041\031\044\032\043\033\051\001"
                                + "\001\000\020\020\125\024\050\025\105\026\041\031\044"
                                + "\032\043\033\051\001\001\000\002\001\001\000\002\001"
                                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                                + "\000\002\001\001\000\004\023\036\001\001\000\002\001"
                                + "\001\000\002\001\001\000\022\014\133\015\134\016\025"
                                + "\042\135\043\136\046\141\047\137\050\142\001\001\000"
                                + "\004\035\153\001\001\000\004\035\152\001\001\000\002"
                                + "\001\001\000\002\001\001\000\002\001\001\000\010\014"
                                + "\144\015\143\016\025\001\001\000\002\001\001\000\002"
                                + "\001\001\000\004\035\146\001\001\000\004\035\145\001"
                                + "\001\000\002\001\001\000\002\001\001\000\016\014\133"
                                + "\015\134\016\025\046\150\047\137\050\142\001\001\000"
                                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                                + "\001\001\000\002\001\001\000\002\001\001\000\040\005"
                                + "\227\006\231\007\022\010\014\011\020\012\016\032\162"
                                + "\057\233\061\232\062\161\063\166\064\163\065\157\066"
                                + "\230\067\226\001\001\000\002\001\001\000\002\001\001"
                                + "\000\002\001\001\000\004\023\113\001\001\000\002\001"
                                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                                + "\000\022\020\106\021\170\024\050\025\105\026\041\031"
                                + "\044\032\043\033\051\001\001\000\002\001\001\000\002"
                                + "\001\001\000\016\024\050\025\173\026\041\031\044\032"
                                + "\043\033\051\001\001\000\002\001\001\000\002\001\001"
                                + "\000\020\032\162\057\200\060\201\062\161\063\204\064"
                                + "\203\065\177\001\001\000\002\001\001\000\002\001\001"
                                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                                + "\002\001\001\000\002\001\001\000\016\024\050\025\206"
                                + "\026\041\031\044\032\043\033\051\001\001\000\002\001"
                                + "\001\000\002\001\001\000\020\032\162\057\200\060\211"
                                + "\062\161\063\204\064\203\065\177\001\001\000\002\001"
                                + "\001\000\020\032\162\057\213\060\214\062\161\063\204"
                                + "\064\203\065\177\001\001\000\002\001\001\000\002\001"
                                + "\001\000\016\032\162\057\213\062\161\063\166\064\163"
                                + "\065\157\001\001\000\016\024\050\025\217\026\041\031"
                                + "\044\032\043\033\051\001\001\000\002\001\001\000\020"
                                + "\032\162\057\221\060\222\062\161\063\204\064\203\065"
                                + "\177\001\001\000\002\001\001\000\002\001\001\000\016"
                                + "\024\050\025\224\026\041\031\044\032\043\033\051\001"
                                + "\001\000\002\001\001\000\002\001\001\000\034\005\227"
                                + "\006\231\007\022\010\014\011\020\012\016\032\162\057"
                                + "\233\061\235\062\161\063\166\064\163\065\157\001\001"
                                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                                + "\001\001\000\016\024\050\025\237\026\041\031\044\032"
                                + "\043\033\051\001\001\000\002\001\001\000\016\032\162"
                                + "\057\221\062\161\063\166\064\163\065\157\001\001\000"
                                + "\004\035\242\001\001\000\002\001\001\000\024\022\246"
                                + "\024\050\025\251\026\041\031\044\032\043\033\051\040"
                                + "\250\041\247\001\001\000\002\001\001\000\022\020\125"
                                + "\024\050\025\105\026\041\031\044\032\043\033\051\035"
                                + "\256\001\001\000\002\001\001\000\002\001\001\000\004"
                                + "\041\255\001\001\000\002\001\001\000\002\001\001\000"
                                + "\004\035\256\001\001\000\002\001\001\000\002\001\001"
                                + "\000\002\001\001\000\020\024\050\025\261\026\041\031"
                                + "\044\032\043\033\051\041\260\001\001\000\002\001\001"
                                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                                + "\001\001\000\016\014\133\015\134\016\025\044\273\045"
                                + "\271\047\272\001\001\000\002\001\001\000\002\001\001"
                                + "\000\002\001\001\000\002\001\001\000\012\014\133\015"
                                + "\134\016\025\047\276\001\001\000\002\001\001\000\014"
                                + "\006\310\052\304\053\305\054\307\055\306\001\001\000"
                                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                                + "\001\001\000\002\001\001\000\002\001\001\000\004\006"
                                + "\314\001\001\000\020\024\050\025\312\026\041\030\311"
                                + "\031\044\032\043\033\051\001\001\000\002\001\001\000"
                                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                                + "\001\001\000\002\001\001"
                    });

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$AnalisadorSintatico$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions() {
        action_obj = new CUP$AnalisadorSintatico$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
            int act_num, java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$AnalisadorSintatico$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {
        return 0;
    }
    /** Indicates start production. */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    public int error_sym() {
        return 1;
    }

    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error ");

        if (info instanceof java_cup.runtime.Symbol) {
            m.append("(" + info.toString() + ")");
        }
        m.append(" : " + message);
        System.out.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal Syntax Error");
    }
}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$AnalisadorSintatico$actions {
    private final AnalisadorSintatico parser;

    /** Constructor */
    CUP$AnalisadorSintatico$actions(AnalisadorSintatico parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code. */
    public final java_cup.runtime.Symbol CUP$AnalisadorSintatico$do_action(
            int CUP$AnalisadorSintatico$act_num,
            java_cup.runtime.lr_parser CUP$AnalisadorSintatico$parser,
            java.util.Stack CUP$AnalisadorSintatico$stack,
            int CUP$AnalisadorSintatico$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$AnalisadorSintatico$result;

        /* select the action based on the action number */
        switch (CUP$AnalisadorSintatico$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
            case 113: // lista_param_formal_proc ::= lista_param_formal_proc COMMA param_ref
                {
                    List<Parametro> RESULT = null;
                    int lpleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .left;
                    int lpright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .right;
                    List<Parametro> lp =
                            (List<Parametro>)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2))
                                            .value;
                    int pleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int pright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Parametro p =
                            (Parametro)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    lp.add(p);
                    RESULT = lp;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "lista_param_formal_proc",
                                            35,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 112: // lista_param_formal_proc ::= param_ref
                {
                    List<Parametro> RESULT = null;
                    int pleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int pright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Parametro p =
                            (Parametro)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new ArrayList<Parametro>(Arrays.asList(p));
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "lista_param_formal_proc",
                                            35,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 111: // lista_param_formal_proc_opt ::= lista_param_formal_proc
                {
                    List<Parametro> RESULT = null;
                    int lleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int lright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    List<Parametro> l =
                            (List<Parametro>)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = l;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "lista_param_formal_proc_opt",
                                            34,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 110: // lista_param_formal_proc_opt ::=
                {
                    List<Parametro> RESULT = null;
                    RESULT = new ArrayList<Parametro>();
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "lista_param_formal_proc_opt",
                                            34,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 109: // ass_proc ::= PROCEDURE IDENTIFIER LPAREN lista_param_formal_proc_opt RPAREN
                {
                    Object[] RESULT = null;
                    int ileft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .left;
                    int iright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .right;
                    java.lang.String i =
                            (java.lang.String)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 3))
                                            .value;
                    int lleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int lright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    List<Parametro> l =
                            (List<Parametro>)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    Object[] o = new Object[2];
                    o[0] = i;
                    o[1] = l;
                    RESULT = o;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "ass_proc",
                                            29,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 4)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 108: // dec_proc ::= ass_proc comando
                {
                    Procedimento RESULT = null;
                    int aleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int aright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    Object[] a =
                            (Object[])
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    int cleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int cright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Comando c =
                            (Comando)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new Procedimento((String) a[0], (List<Parametro>) a[1], c);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_proc",
                                            44,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 107: // dec_exp ::= expressao SEMICOLON
                {
                    Exp RESULT = null;
                    int eleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int eright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    Exp e =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    RESULT = e;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_exp",
                                            22,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 106: // dec_bloco_cons ::= dec_bloco_cons dec_cons
                {
                    List<DCons> RESULT = null;
                    int ldleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int ldright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    List<DCons> ld =
                            (List<DCons>)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    int dleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int dright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    DCons d =
                            (DCons)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    ld.add(d);
                    RESULT = ld;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_bloco_cons",
                                            43,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 105: // dec_bloco_cons ::= dec_cons
                {
                    List<DCons> RESULT = null;
                    int dleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int dright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    DCons d =
                            (DCons)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new ArrayList<DCons>(Arrays.asList(d));
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_bloco_cons",
                                            43,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 104: // dec_bloco_cons_opt ::= dec_bloco_cons
                {
                    List<DCons> RESULT = null;
                    int ldleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int ldright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    List<DCons> ld =
                            (List<DCons>)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = ld;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_bloco_cons_opt",
                                            42,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 103: // dec_bloco_cons_opt ::=
                {
                    List<DCons> RESULT = null;
                    RESULT = new ArrayList<DCons>();
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_bloco_cons_opt",
                                            42,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 102: // dec_bloco_exp ::= dec_bloco_cons_opt dec_exp
                {
                    BlocoExp RESULT = null;
                    int ldleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int ldright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    List<DCons> ld =
                            (List<DCons>)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    int eleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int eright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp e =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new BlocoExp(ld, e);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_bloco_exp",
                                            41,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 101: // dec_bloco_exp_opt ::= dec_bloco_exp
                {
                    BlocoExp RESULT = null;
                    int dleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int dright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    BlocoExp d =
                            (BlocoExp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = d;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_bloco_exp_opt",
                                            40,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 100: // dec_bloco_exp_opt ::=
                {
                    BlocoExp RESULT = null;
                    RESULT = new BlocoExp(null, null);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_bloco_exp_opt",
                                            40,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 99: // bloco_exp ::= LBRACE dec_bloco_exp_opt RBRACE
                {
                    BlocoExp RESULT = null;
                    int dleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int dright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    BlocoExp d =
                            (BlocoExp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    RESULT = d;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "bloco_exp",
                                            39,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 98: // corpo_func ::= bloco_exp
                {
                    Exp RESULT = null;
                    int bleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int bright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    BlocoExp b =
                            (BlocoExp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = b;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "corpo_func",
                                            21,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 97: // corpo_func ::= expressao SEMICOLON
                {
                    Exp RESULT = null;
                    int eleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int eright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    Exp e =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    RESULT = e;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "corpo_func",
                                            21,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 96: // param_copia ::= VAR tipo_array declarador_var_id
                {
                    Parametro RESULT = null;
                    int tleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int tright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    TipoArray t =
                            (TipoArray)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    int idleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int idright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    java.lang.String id =
                            (java.lang.String)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new ParArrayCopia(t.base, t.exp.size(), id);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "param_copia",
                                            38,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 95: // param_copia ::= VAR tipo_base declarador_var_id
                {
                    Parametro RESULT = null;
                    int tleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int tright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    TipoBase t =
                            (TipoBase)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    int idleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int idright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    java.lang.String id =
                            (java.lang.String)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new ParBaseCopia(t.tipo, id);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "param_copia",
                                            38,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 94: // param_ref ::= tipo_array declarador_var_id
                {
                    Parametro RESULT = null;
                    int tleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int tright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    TipoArray t =
                            (TipoArray)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    int idleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int idright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    java.lang.String id =
                            (java.lang.String)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new ParArrayRef(t.base, t.exp.size(), id);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "param_ref",
                                            37,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 93: // param_ref ::= tipo_base declarador_var_id
                {
                    Parametro RESULT = null;
                    int tleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int tright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    TipoBase t =
                            (TipoBase)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    int idleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int idright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    java.lang.String id =
                            (java.lang.String)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new ParBaseRef(t.tipo, id);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "param_ref",
                                            37,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 92: // param_formal ::= param_copia
                {
                    Parametro RESULT = null;
                    int pleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int pright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Parametro p =
                            (Parametro)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = p;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "param_formal",
                                            36,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 91: // param_formal ::= param_ref
                {
                    Parametro RESULT = null;
                    int pleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int pright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Parametro p =
                            (Parametro)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = p;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "param_formal",
                                            36,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 90: // lista_param_formal ::= lista_param_formal COMMA param_formal
                {
                    List<Parametro> RESULT = null;
                    int lpleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .left;
                    int lpright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .right;
                    List<Parametro> lp =
                            (List<Parametro>)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2))
                                            .value;
                    int pleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int pright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Parametro p =
                            (Parametro)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    lp.add(p);
                    RESULT = lp;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "lista_param_formal",
                                            33,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 89: // lista_param_formal ::= param_formal
                {
                    List<Parametro> RESULT = null;
                    int pleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int pright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Parametro p =
                            (Parametro)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new ArrayList<Parametro>(Arrays.asList(p));
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "lista_param_formal",
                                            33,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 88: // lista_param_formal_opt ::= lista_param_formal
                {
                    List<Parametro> RESULT = null;
                    int lleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int lright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    List<Parametro> l =
                            (List<Parametro>)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = l;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "lista_param_formal_opt",
                                            32,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 87: // lista_param_formal_opt ::=
                {
                    List<Parametro> RESULT = null;
                    RESULT = new ArrayList<Parametro>();
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "lista_param_formal_opt",
                                            32,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 86: // ass_func ::= FUNCTION tipo IDENTIFIER LPAREN lista_param_formal_opt RPAREN
                {
                    Object[] RESULT = null;
                    int tleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 4))
                                    .left;
                    int tright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 4))
                                    .right;
                    Tipo t =
                            (Tipo)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 4))
                                            .value;
                    int ileft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .left;
                    int iright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .right;
                    java.lang.String i =
                            (java.lang.String)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 3))
                                            .value;
                    int lleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int lright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    List<Parametro> l =
                            (List<Parametro>)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    Object[] o = new Object[3];
                    o[0] = t;
                    o[1] = i;
                    o[2] = l;
                    RESULT = o;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "ass_func",
                                            28,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 5)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 85: // dec_func ::= ass_func corpo_func
                {
                    Funcao RESULT = null;
                    int aleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int aright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    Object[] a =
                            (Object[])
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    int cleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int cright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp c =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new Funcao((Tipo) a[0], (String) a[1], (List<Parametro>) a[2], c);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_func",
                                            26,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 84: // id_compreensao ::= LBRACE declarador_var_id PIPE id_compreensao RBRACE
                {
                    Object[] RESULT = null;
                    int idleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .left;
                    int idright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .right;
                    java.lang.String id =
                            (java.lang.String)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 3))
                                            .value;
                    int loleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int loright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    Object[] lo =
                            (Object[])
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    ((List<String>) lo[0]).add(id);
                    RESULT = lo;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "id_compreensao",
                                            31,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 4)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 83: // id_compreensao ::= LBRACE declarador_var_id PIPE expressao RBRACE
                {
                    Object[] RESULT = null;
                    int idleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .left;
                    int idright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .right;
                    java.lang.String id =
                            (java.lang.String)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 3))
                                            .value;
                    int eleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int eright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    Exp e =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;

                    Object[] o = new Object[2];
                    o[0] = new ArrayList<String>(Arrays.asList(id));
                    o[1] = e;
                    RESULT = o;

                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "id_compreensao",
                                            31,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 4)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 82: // inicializador_array_comp ::= inicializador_array_comp id_compreensao
                {
                    Object[] RESULT = null;

                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "inicializador_array_comp",
                                            30,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 81: // inicializador_array_comp ::= id_compreensao
                {
                    Object[] RESULT = null;
                    int loleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int loright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Object[] lo =
                            (Object[])
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = lo;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "inicializador_array_comp",
                                            30,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 80: // inicializador_array ::= LBRACE lista_expressao RBRACE
                {
                    List<Exp> RESULT = null;
                    int lleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int lright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    List<Exp> l =
                            (List<Exp>)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    RESULT = l;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "inicializador_array",
                                            16,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 79: // declarador_var_id ::= IDENTIFIER
                {
                    java.lang.String RESULT = null;
                    int ileft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int iright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    java.lang.String i =
                            (java.lang.String)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = i;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "declarador_var_id",
                                            27,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 78: // dec_cons ::= CONS tipo declarador_var_id EQ inicializador_array SEMICOLON
                {
                    DCons RESULT = null;
                    int tleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 4))
                                    .left;
                    int tright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 4))
                                    .right;
                    Tipo t =
                            (Tipo)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 4))
                                            .value;
                    int idleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .left;
                    int idright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .right;
                    java.lang.String id =
                            (java.lang.String)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 3))
                                            .value;
                    int leleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int leright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    List<Exp> le =
                            (List<Exp>)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    RESULT = new ConsExt(t, id, le);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_cons",
                                            4,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 5)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 77: // dec_cons ::= CONS tipo declarador_var_id EQ expressao SEMICOLON
                {
                    DCons RESULT = null;
                    int tleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 4))
                                    .left;
                    int tright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 4))
                                    .right;
                    Tipo t =
                            (Tipo)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 4))
                                            .value;
                    int idleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .left;
                    int idright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .right;
                    java.lang.String id =
                            (java.lang.String)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 3))
                                            .value;
                    int eleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int eright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    Exp e =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    RESULT = new Cons(t, id, e);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_cons",
                                            4,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 5)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // var_comp ::= VAR tipo declarador_var_id EQ inicializador_array_comp SEMICOLON
                {
                    VarInicComp RESULT = null;
                    int tleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 4))
                                    .left;
                    int tright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 4))
                                    .right;
                    Tipo t =
                            (Tipo)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 4))
                                            .value;
                    int idleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .left;
                    int idright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .right;
                    java.lang.String id =
                            (java.lang.String)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 3))
                                            .value;
                    int oleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int oright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    Object[] o =
                            (Object[])
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    RESULT = new VarInicComp(t, id, (List<String>) o[0], (Exp) o[1]);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "var_comp",
                                            8,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 5)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // var_inic_ext ::= VAR tipo declarador_var_id EQ inicializador_array SEMICOLON
                {
                    VarInicExt RESULT = null;
                    int tleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 4))
                                    .left;
                    int tright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 4))
                                    .right;
                    Tipo t =
                            (Tipo)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 4))
                                            .value;
                    int idleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .left;
                    int idright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .right;
                    java.lang.String id =
                            (java.lang.String)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 3))
                                            .value;
                    int leleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int leright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    List<Exp> le =
                            (List<Exp>)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    RESULT = new VarInicExt(t, id, le);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "var_inic_ext",
                                            7,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 5)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 74: // var_inic ::= VAR tipo declarador_var_id EQ expressao SEMICOLON
                {
                    VarInic RESULT = null;
                    int tleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 4))
                                    .left;
                    int tright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 4))
                                    .right;
                    Tipo t =
                            (Tipo)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 4))
                                            .value;
                    int idleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .left;
                    int idright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .right;
                    java.lang.String id =
                            (java.lang.String)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 3))
                                            .value;
                    int eleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int eright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    Exp e =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    RESULT = new VarInic(t, id, e);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "var_inic",
                                            5,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 5)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 73: // var_ninic ::= VAR tipo declarador_var_id SEMICOLON
                {
                    VarNaoInic RESULT = null;
                    int tleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .left;
                    int tright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .right;
                    Tipo t =
                            (Tipo)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2))
                                            .value;
                    int idleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int idright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    java.lang.String id =
                            (java.lang.String)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    RESULT = new VarNaoInic(t, id);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "var_ninic",
                                            6,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 3)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 72: // dec_var ::= var_comp
                {
                    DVar RESULT = null;
                    int vleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int vright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    VarInicComp v =
                            (VarInicComp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = v;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_var",
                                            3,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 71: // dec_var ::= var_inic_ext
                {
                    DVar RESULT = null;
                    int vleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int vright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    VarInicExt v =
                            (VarInicExt)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = v;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_var",
                                            3,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 70: // dec_var ::= var_inic
                {
                    DVar RESULT = null;
                    int vleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int vright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    VarInic v =
                            (VarInic)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = v;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_var",
                                            3,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 69: // dec_var ::= var_ninic
                {
                    DVar RESULT = null;
                    int vleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int vright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    VarNaoInic v =
                            (VarNaoInic)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = v;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_var",
                                            3,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 68: // dec_comandos ::= dec_cons
                {
                    DVarConsCom RESULT = null;
                    int cleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int cright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    DCons c =
                            (DCons)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new DC(c);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_comandos",
                                            47,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // dec_comandos ::= dec_var
                {
                    DVarConsCom RESULT = null;
                    int vleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int vright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    DVar v =
                            (DVar)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new DV(v);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_comandos",
                                            47,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 66: // dec_comandos ::= comando
                {
                    DVarConsCom RESULT = null;
                    int cleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int cright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Comando c =
                            (Comando)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new Com(c);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_comandos",
                                            47,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 65: // bloco_comandos ::= bloco_comandos dec_comandos
                {
                    List<DVarConsCom> RESULT = null;
                    int lcleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int lcright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    List<DVarConsCom> lc =
                            (List<DVarConsCom>)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    int cleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int cright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    DVarConsCom c =
                            (DVarConsCom)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    lc.add(c);
                    RESULT = lc;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "bloco_comandos",
                                            53,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 64: // bloco_comandos ::= dec_comandos
                {
                    List<DVarConsCom> RESULT = null;
                    int cleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int cright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    DVarConsCom c =
                            (DVarConsCom)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new ArrayList<DVarConsCom>(Arrays.asList(c));
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "bloco_comandos",
                                            53,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 63: // bloco_comandos_opt ::= bloco_comandos
                {
                    BLOCO RESULT = null;
                    int bleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int bright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    List<DVarConsCom> b =
                            (List<DVarConsCom>)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new BLOCO(b);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "bloco_comandos_opt",
                                            52,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 62: // bloco_comandos_opt ::=
                {
                    BLOCO RESULT = null;
                    RESULT = new BLOCO(null);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "bloco_comandos_opt",
                                            52,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // bloco ::= LBRACE bloco_comandos_opt RBRACE
                {
                    BLOCO RESULT = null;
                    int bleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int bright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    BLOCO b =
                            (BLOCO)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    RESULT = b;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "bloco",
                                            51,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 60: // chamada_comando ::= IDENTIFIER LPAREN exp_opt RPAREN
                {
                    CHAMADA RESULT = null;
                    int ileft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .left;
                    int iright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .right;
                    java.lang.String i =
                            (java.lang.String)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 3))
                                            .value;
                    int eleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int eright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    List<Exp> e =
                            (List<Exp>)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    RESULT = new CHAMADA(i, e);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "chamada_comando",
                                            50,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 3)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 59: // assign ::= simples_indexada EQ expressao SEMICOLON
                {
                    ASSIGN RESULT = null;
                    int ileft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .left;
                    int iright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .right;
                    Var i =
                            (Var)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 3))
                                            .value;
                    int eleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int eright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    Exp e =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    RESULT = new ASSIGN(i, e);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "assign",
                                            49,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 3)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 58: // while ::= WHILE LPAREN expressao RPAREN comando
                {
                    WHILE RESULT = null;
                    int eleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .left;
                    int eright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .right;
                    Exp e =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2))
                                            .value;
                    int cleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int cright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Comando c =
                            (Comando)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new WHILE(e, c);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "while",
                                            48,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 4)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 57: // comando_restrito ::= chamada_comando
                {
                    Comando RESULT = null;
                    int cleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int cright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    CHAMADA c =
                            (CHAMADA)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = c;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "comando_restrito",
                                            46,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 56: // comando_restrito ::= assign
                {
                    Comando RESULT = null;
                    int aleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int aright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    ASSIGN a =
                            (ASSIGN)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = a;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "comando_restrito",
                                            46,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 55: // comando_restrito ::= WHILE LPAREN expressao RPAREN comando_restrito
                {
                    Comando RESULT = null;
                    int eleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .left;
                    int eright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .right;
                    Exp e =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2))
                                            .value;
                    int cleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int cright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Comando c =
                            (Comando)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new WHILE(e, c);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "comando_restrito",
                                            46,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 4)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 54: // comando_restrito ::= IF LPAREN expressao RPAREN THEN comando_restrito ELSE comando_restrito
                {
                    Comando RESULT = null;
                    int eleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 5))
                                    .left;
                    int eright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 5))
                                    .right;
                    Exp e =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 5))
                                            .value;
                    int c1left =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .left;
                    int c1right =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .right;
                    Comando c1 =
                            (Comando)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2))
                                            .value;
                    int c2left =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int c2right =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Comando c2 =
                            (Comando)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new IF(e, c1, c2);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "comando_restrito",
                                            46,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 7)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 53: // comando_restrito ::= bloco
                {
                    Comando RESULT = null;
                    int bleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int bright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    BLOCO b =
                            (BLOCO)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = b;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "comando_restrito",
                                            46,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 52: // comando ::= chamada_comando
                {
                    Comando RESULT = null;
                    int cleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int cright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    CHAMADA c =
                            (CHAMADA)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = c;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "comando",
                                            45,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 51: // comando ::= assign
                {
                    Comando RESULT = null;
                    int aleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int aright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    ASSIGN a =
                            (ASSIGN)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = a;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "comando",
                                            45,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 50: // comando ::= while
                {
                    Comando RESULT = null;
                    int wleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int wright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    WHILE w =
                            (WHILE)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = w;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "comando",
                                            45,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 49: // comando ::= IF LPAREN expressao RPAREN THEN comando_restrito ELSE comando
                {
                    Comando RESULT = null;
                    int eleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 5))
                                    .left;
                    int eright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 5))
                                    .right;
                    Exp e =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 5))
                                            .value;
                    int c1left =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .left;
                    int c1right =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .right;
                    Comando c1 =
                            (Comando)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2))
                                            .value;
                    int c2left =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int c2right =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Comando c2 =
                            (Comando)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new IF(e, c1, c2);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "comando",
                                            45,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 7)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 48: // comando ::= IF LPAREN expressao RPAREN THEN comando
                {
                    Comando RESULT = null;
                    int eleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .left;
                    int eright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .right;
                    Exp e =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 3))
                                            .value;
                    int cleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int cright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Comando c =
                            (Comando)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new IF(e, c, null);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "comando",
                                            45,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 5)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // comando ::= bloco
                {
                    Comando RESULT = null;
                    int bleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int bright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    BLOCO b =
                            (BLOCO)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = b;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "comando",
                                            45,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // lista_expressao ::= lista_expressao COMMA expressao
                {
                    List<Exp> RESULT = null;
                    int leleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .left;
                    int leright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .right;
                    List<Exp> le =
                            (List<Exp>)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2))
                                            .value;
                    int eleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int eright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp e =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    le.add(e);
                    RESULT = le;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "lista_expressao",
                                            14,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // lista_expressao ::= expressao
                {
                    List<Exp> RESULT = null;
                    int eleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int eright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp e =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new ArrayList<Exp>(Arrays.asList(e));
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "lista_expressao",
                                            14,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // exp_opt ::= lista_expressao
                {
                    List<Exp> RESULT = null;
                    int lleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int lright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    List<Exp> l =
                            (List<Exp>)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = l;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "exp_opt",
                                            15,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // exp_opt ::=
                {
                    List<Exp> RESULT = null;
                    RESULT = new ArrayList<Exp>();
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "exp_opt",
                                            15,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // simples_indexada ::= simples_indexada dimensao
                {
                    Var RESULT = null;
                    int vleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int vright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    Var v =
                            (Var)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    int dleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int dright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp d =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new Indexada(v, d);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "simples_indexada",
                                            24,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // simples_indexada ::= IDENTIFIER
                {
                    Var RESULT = null;
                    int ileft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int iright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    java.lang.String i =
                            (java.lang.String)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new Simples(i);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "simples_indexada",
                                            24,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // var_exp ::= simples_indexada
                {
                    VarExp RESULT = null;
                    int vleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int vright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Var v =
                            (Var)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new VarExp(v);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "var_exp",
                                            23,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // chamada ::= IDENTIFIER LPAREN exp_opt RPAREN
                {
                    ChamadaExp RESULT = null;
                    int ileft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .left;
                    int iright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 3))
                                    .right;
                    java.lang.String i =
                            (java.lang.String)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 3))
                                            .value;
                    int eleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int eright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    List<Exp> e =
                            (List<Exp>)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    RESULT = new ChamadaExp(i, e);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "chamada",
                                            25,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 3)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // primaria ::= chamada
                {
                    Exp RESULT = null;
                    int cleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int cright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    ChamadaExp c =
                            (ChamadaExp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = c;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "primaria",
                                            20,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // primaria ::= var_exp
                {
                    Exp RESULT = null;
                    int vleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int vright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    VarExp v =
                            (VarExp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = v;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "primaria",
                                            20,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // primaria ::= literal
                {
                    Exp RESULT = null;
                    int lleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int lright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp l =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = l;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "primaria",
                                            20,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // primaria ::= LPAREN expressao RPAREN
                {
                    Exp RESULT = null;
                    int eleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int eright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    Exp e =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    RESULT = e;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "primaria",
                                            20,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // expressao ::= NOT expressao
                {
                    Exp RESULT = null;
                    int e1left =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int e1right =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp e1 =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new Nao(e1);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "expressao",
                                            19,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // expressao ::= MINUS expressao
                {
                    Exp RESULT = null;
                    int e1left =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int e1right =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp e1 =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new Menos(e1);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "expressao",
                                            19,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // expressao ::= expressao OR expressao
                {
                    Exp RESULT = null;
                    int e1left =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .left;
                    int e1right =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .right;
                    Exp e1 =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2))
                                            .value;
                    int e2left =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int e2right =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp e2 =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new BinExp(BinOp.Ou, e1, e2);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "expressao",
                                            19,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // expressao ::= expressao AND expressao
                {
                    Exp RESULT = null;
                    int e1left =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .left;
                    int e1right =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .right;
                    Exp e1 =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2))
                                            .value;
                    int e2left =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int e2right =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp e2 =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new BinExp(BinOp.E, e1, e2);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "expressao",
                                            19,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // expressao ::= expressao EQEQ expressao
                {
                    Exp RESULT = null;
                    int e1left =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .left;
                    int e1right =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .right;
                    Exp e1 =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2))
                                            .value;
                    int e2left =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int e2right =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp e2 =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new BinExp(BinOp.Igual, e1, e2);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "expressao",
                                            19,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // expressao ::= expressao LT expressao
                {
                    Exp RESULT = null;
                    int e1left =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .left;
                    int e1right =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .right;
                    Exp e1 =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2))
                                            .value;
                    int e2left =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int e2right =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp e2 =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new BinExp(BinOp.Menor, e1, e2);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "expressao",
                                            19,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // expressao ::= expressao GT expressao
                {
                    Exp RESULT = null;
                    int e1left =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .left;
                    int e1right =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .right;
                    Exp e1 =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2))
                                            .value;
                    int e2left =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int e2right =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp e2 =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new BinExp(BinOp.Maior, e1, e2);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "expressao",
                                            19,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // expressao ::= expressao MOD expressao
                {
                    Exp RESULT = null;
                    int e1left =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .left;
                    int e1right =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .right;
                    Exp e1 =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2))
                                            .value;
                    int e2left =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int e2right =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp e2 =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new BinExp(BinOp.Mod, e1, e2);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "expressao",
                                            19,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // expressao ::= expressao DIV expressao
                {
                    Exp RESULT = null;
                    int e1left =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .left;
                    int e1right =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .right;
                    Exp e1 =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2))
                                            .value;
                    int e2left =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int e2right =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp e2 =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new BinExp(BinOp.Div, e1, e2);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "expressao",
                                            19,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // expressao ::= expressao MULT expressao
                {
                    Exp RESULT = null;
                    int e1left =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .left;
                    int e1right =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .right;
                    Exp e1 =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2))
                                            .value;
                    int e2left =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int e2right =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp e2 =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new BinExp(BinOp.Mul, e1, e2);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "expressao",
                                            19,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // expressao ::= expressao MINUS expressao
                {
                    Exp RESULT = null;
                    int e1left =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .left;
                    int e1right =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .right;
                    Exp e1 =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2))
                                            .value;
                    int e2left =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int e2right =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp e2 =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new BinExp(BinOp.Sub, e1, e2);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "expressao",
                                            19,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // expressao ::= expressao PLUS expressao
                {
                    Exp RESULT = null;
                    int e1left =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .left;
                    int e1right =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 2))
                                    .right;
                    Exp e1 =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2))
                                            .value;
                    int e2left =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int e2right =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp e2 =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new BinExp(BinOp.Som, e1, e2);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "expressao",
                                            19,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // expressao ::= primaria
                {
                    Exp RESULT = null;
                    int pleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int pright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp p =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = p;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "expressao",
                                            19,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // literal ::= BOOLEAN_LITERAL
                {
                    Exp RESULT = null;
                    int lleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int lright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    java.lang.Boolean l =
                            (java.lang.Boolean)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new LiteralBool(l);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "literal",
                                            18,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // literal ::= REAL_LITERAL
                {
                    Exp RESULT = null;
                    int lleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int lright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    java.lang.Double l =
                            (java.lang.Double)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new LiteralReal(l);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "literal",
                                            18,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // literal ::= INTEGER_LITERAL
                {
                    Exp RESULT = null;
                    int lleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int lright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    java.lang.Integer l =
                            (java.lang.Integer)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new LiteralInt(l);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "literal",
                                            18,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // numerico ::= REAL
                {
                    TBase RESULT = null;
                    RESULT = TBase.Real;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "numerico",
                                            12,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // numerico ::= INT
                {
                    TBase RESULT = null;
                    RESULT = TBase.Int;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "numerico",
                                            12,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // dimensao ::= LBRACK expressao RBRACK
                {
                    Exp RESULT = null;
                    int eleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int eright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    Exp e =
                            (Exp)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    RESULT = e;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dimensao",
                                            17,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 2)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // lista_dimensao ::= lista_dimensao dimensao
                {
                    List<Exp> RESULT = null;
                    int ldleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int ldright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    List<Exp> ld =
                            (List<Exp>)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    int dleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int dright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp d =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    ld.add(d);
                    RESULT = ld;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "lista_dimensao",
                                            13,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // lista_dimensao ::= dimensao
                {
                    List<Exp> RESULT = null;
                    int dleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int dright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Exp d =
                            (Exp)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new ArrayList<Exp>(Arrays.asList(d));
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "lista_dimensao",
                                            13,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // tipo_array ::= BOOLEAN lista_dimensao
                {
                    TipoArray RESULT = null;
                    int dleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int dright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    List<Exp> d =
                            (List<Exp>)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new TipoArray(TBase.Bool, d);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "tipo_array",
                                            11,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // tipo_array ::= numerico lista_dimensao
                {
                    TipoArray RESULT = null;
                    int tleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int tright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    TBase t =
                            (TBase)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    int dleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int dright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    List<Exp> d =
                            (List<Exp>)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new TipoArray(t, d);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "tipo_array",
                                            11,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // tipo_base ::= BOOLEAN
                {
                    TipoBase RESULT = null;
                    RESULT = new TipoBase(TBase.Bool);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "tipo_base",
                                            10,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // tipo_base ::= numerico
                {
                    TipoBase RESULT = null;
                    int nleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int nright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    TBase n =
                            (TBase)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new TipoBase(n);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "tipo_base",
                                            10,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // tipo ::= tipo_array
                {
                    Tipo RESULT = null;
                    int tleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int tright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    TipoArray t =
                            (TipoArray)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = t;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "tipo",
                                            9,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // tipo ::= tipo_base
                {
                    Tipo RESULT = null;
                    int tleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int tright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    TipoBase t =
                            (TipoBase)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = t;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "tipo",
                                            9,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // dec ::= dec_proc
                {
                    Dec RESULT = null;
                    int dleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int dright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Procedimento d =
                            (Procedimento)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = d;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec",
                                            2,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // dec ::= dec_func
                {
                    Dec RESULT = null;
                    int dleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int dright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Funcao d =
                            (Funcao)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = d;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec",
                                            2,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // dec ::= dec_cons
                {
                    Dec RESULT = null;
                    int dleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int dright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    DCons d =
                            (DCons)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new DecCons(d);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec",
                                            2,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // dec ::= dec_var
                {
                    Dec RESULT = null;
                    int dleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int dright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    DVar d =
                            (DVar)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new DecVar(d);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec",
                                            2,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // dec_list ::= dec_list dec
                {
                    List<Dec> RESULT = null;
                    int dlleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int dlright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    List<Dec> dl =
                            (List<Dec>)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    int dleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int dright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Dec d =
                            (Dec)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    dl.add(d);
                    RESULT = dl;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_list",
                                            1,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // dec_list ::= dec
                {
                    List<Dec> RESULT = null;
                    int dleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int dright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    Dec d =
                            (Dec)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new ArrayList<Dec>(Arrays.asList(d));
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "dec_list",
                                            1,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // program ::= dec_list
                {
                    Programa RESULT = null;
                    int dleft =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).left;
                    int dright =
                            ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).right;
                    List<Dec> d =
                            (List<Dec>)
                                    ((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek())
                                            .value;
                    RESULT = new Programa(d);
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "program",
                                            0,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                return CUP$AnalisadorSintatico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // $START ::= program EOF
                {
                    Object RESULT = null;
                    int start_valleft =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .left;
                    int start_valright =
                            ((java_cup.runtime.Symbol)
                                            CUP$AnalisadorSintatico$stack.elementAt(
                                                    CUP$AnalisadorSintatico$top - 1))
                                    .right;
                    Programa start_val =
                            (Programa)
                                    ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1))
                                            .value;
                    RESULT = start_val;
                    CUP$AnalisadorSintatico$result =
                            parser.getSymbolFactory()
                                    .newSymbol(
                                            "$START",
                                            0,
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.elementAt(
                                                            CUP$AnalisadorSintatico$top - 1)),
                                            ((java_cup.runtime.Symbol)
                                                    CUP$AnalisadorSintatico$stack.peek()),
                                            RESULT);
                }
                /* ACCEPT */
                CUP$AnalisadorSintatico$parser.done_parsing();
                return CUP$AnalisadorSintatico$result;

                /* . . . . . .*/
            default:
                throw new Exception("Invalid action number found in internal parse table");
        }
    }
}
